{"version":3,"sources":["components/UploadPhoto/UploadPhoto.js","App.js","serviceWorker.js","middleware/general.mid.js","reducers/rootReducer.js","reducers/general.red.js","index.js","store.js"],"names":["UploadPhoto","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","image","imagePreviewUrl","e","_this2","reader","FileReader","target","files","onloadend","setState","result","show","readAsDataURL","_this3","react_default","a","createElement","className","type","onChange","_onChange","src","_this4","_this$state","renderImg","_uploadInput","onClick","_showImg","buttonText","Component","App","uploading","images","components_UploadPhoto_UploadPhoto","Boolean","window","location","hostname","match","general_mid","store","next","action","combineReducers","general","arguments","length","undefined","objectSpread","rooms","payload","ReactDOM","render","es","createStore","rootReducer","applyMiddleware","middleware","configureStore","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PA8DeA,qBA3DX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,MAAO,KAAMC,gBAAiB,MAF9BT,yEAKTU,GAAG,IAAAC,EAAAR,KACLS,EAAS,IAAIC,WACbL,EAAQE,EAAEI,OAAOC,MAAM,GAE3BH,EAAOI,UAAY,WACfL,EAAKM,SAAS,CACVT,MAAOA,EACPC,gBAAiBG,EAAOM,OACxBC,MAAM,KAIdP,EAAOQ,cAAcZ,0CAIV,IAAAa,EAAAlB,KACX,OACImB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QAClBH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,SAAU,SAACjB,GAAD,OAAOW,EAAKO,UAAUlB,2CAQlCP,KAAKI,MAAME,gBAGpC,OAAQa,EAAAC,EAAAC,cAAA,OAAKK,IAAK1B,KAAKI,MAAME,qDAIzBN,KAAKI,MAAME,iBACXN,KAAKc,SAAS,CAAEE,MAAM,qCAIrB,IAAAW,EAAA3B,KAAA4B,EAC2B5B,KAAKI,MAA/BE,EADDsB,EACCtB,gBAAiBU,EADlBY,EACkBZ,KAEvB,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACVhB,GAAmBU,EAAOhB,KAAK6B,YAAc7B,KAAK8B,eACnDX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeS,QAAS,kBAAMJ,EAAKK,aAAahC,KAAKJ,MAAMqC,oBArDnEC,cCmBVC,6MAfd/B,MAAQ,CACNgC,WAAW,EACXC,OAAQ,4EAIR,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiB,EAAD,CAAaL,WAAY,yBACzBd,EAAAC,EAAAC,cAACiB,EAAD,CAAaL,WAAY,mCAXfC,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECbSC,EAAA,SAAAC,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAC,GAI5B,OAHIA,EAAOxB,KAGJuB,EAAKC,cCPDC,cAAgB,CAC3BC,QCHW,WAAwB,IAAvB7C,EAAuB8C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIH,EAAWG,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAInC,OAHAhD,EAAKN,OAAAuD,EAAA,EAAAvD,CAAA,GACEM,GAEC2C,EAAOxB,MACX,IAAK,iBACD,IAAI+B,EAAQP,EAAOQ,QAEnB,OAAOzD,OAAAuD,EAAA,EAAAvD,CAAA,GACAM,EADP,CAEIkD,MAAOA,IAGf,QACI,OAAOlD,EAEf,OAAOA,KCRXoD,IAASC,OACLtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAUb,MCNC,WACX,OADsDK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC/CS,YACHC,EACAC,YAAgBC,IDGHC,IACb5C,EAAAC,EAAAC,cAAC2C,EAAD,OAEJC,SAASC,eAAe,SJqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.29db3eb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass UploadPhoto extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { image: null, imagePreviewUrl: null }\r\n    }\r\n\r\n    _onChange(e) {\r\n        let reader = new FileReader();\r\n        let image = e.target.files[0];\r\n\r\n        reader.onloadend = () => {\r\n            this.setState({\r\n                image: image,\r\n                imagePreviewUrl: reader.result,\r\n                show: false\r\n            });\r\n        }\r\n\r\n        reader.readAsDataURL(image)\r\n\r\n    }\r\n\r\n    _uploadInput() {\r\n        return (\r\n            <div className='button'>\r\n                {/* <label class=\"hand-cursor\"> */}\r\n                <button className=\"btn\"></button>\r\n                <input type='file' onChange={(e) => this._onChange(e)}></input>\r\n                {/* </label> */}\r\n            </div >\r\n        )\r\n    }\r\n\r\n    renderImg() {\r\n        let style = {\r\n            background: 'url(' + this.state.imagePreviewUrl + ') no-repeat center',\r\n            'backgroundSize': 'cover'\r\n        }\r\n        return (<img src={this.state.imagePreviewUrl} ></img>)\r\n    }\r\n\r\n    _showImg() {\r\n        if (this.state.imagePreviewUrl) {\r\n            this.setState({ show: true })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { imagePreviewUrl, show } = this.state;\r\n\r\n        return (\r\n            <div className='UploadPhotoContainer'>\r\n                {imagePreviewUrl && show ? this.renderImg() : this._uploadInput()}\r\n                <button className='uploadImgBtn' onClick={() => this._showImg()}>{this.props.buttonText}</button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default UploadPhoto;","import React, { Component } from 'react';\nimport './css/style.css';\nimport UploadPhoto from './components/UploadPhoto/UploadPhoto';\n\nclass App extends Component {\n\n  state = {\n    uploading: false,\n    images: []\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UploadPhoto buttonText={'Upload orginal photo'} />\n        <UploadPhoto buttonText={'Upload protected photo'} />\n      </div>\n    );\n  }\n}\n\nexport default (App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import * as actions from '../actions/general.act';\r\n// import * as Functions from '../common/functions/functions';\r\n\r\n// const axios = require('axios');\r\n\r\nexport default store => next => action => {\r\n    if (action.type == 'API') {\r\n\r\n    }\r\n    return next(action)\r\n}","import { combineReducers } from 'redux';\r\nimport general from './general.red';\r\nexport default combineReducers({\r\n    general\r\n});","export default (state = {}, action) => {\r\n    state = {\r\n        ...state\r\n    }\r\n    switch (action.type) {\r\n        case 'GET_ROOMS_LIST':\r\n            let rooms = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n                rooms: rooms\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n    return state;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\r\nimport middleware from './middleware/general.mid'\r\nimport rootReducer from './reducers/rootReducer';\r\nexport default function configureStore(initialState = {}) {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(middleware)\r\n    );\r\n}"],"sourceRoot":""}